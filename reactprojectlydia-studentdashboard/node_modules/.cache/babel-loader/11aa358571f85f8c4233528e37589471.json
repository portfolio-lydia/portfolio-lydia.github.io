{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lydia van Gammeren\\\\Documents\\\\Winc Academy Front-end Opleiding\\\\WincAcademy_Front-end_alle_opdrachten\\\\reactprojectlydia-studentdashboard\\\\src\\\\views\\\\Chart.js\";\nimport React, { Component } from \"react\";\nimport { XYPlot, XAxis, YAxis, HorizontalGridLines, VerticalBarSeries, ChartLabel } from \"react-vis\";\n\nclass Chart extends Component {\n  handleChange(event) {\n    const checkedFunBox = document.getElementById(\"fun\");\n    const checkedDifficulty = document.getElementById(\"difficulty\");\n    const checkedBoxValue = event.target.value;\n    const funBars = document.getElementsByClassName(\"funfactor\");\n\n    if (checkedFunBox.checked == true) {\n      document.getElementByClassName(\"funfactor\").style.visibility = \"visible\";\n      console.log(\"fun checkbox was checked\");\n    } else {\n      document.getElementByClassName(\"funfactor\").style.visibility = \"visible\";\n    }\n  }\n\n  render() {\n    // variables die ik voor zowel fun als difficulty nodig heb:\n    const {\n      items\n    } = this.props;\n    const assignments = items.map(item => item.assignment);\n    const uniqueassignments = [...new Set(assignments)]; // functies om fun naar het juiste formaat te krijgen\n\n    const funNumbersPerAssignment = uniqueassignments.map(uniqueassignment => {\n      const funFactor = [];\n      items.forEach(item => {\n        if (item.assignment === uniqueassignment) {\n          funFactor.push(parseInt(item.funfactor));\n        }\n      });\n      return funFactor;\n    }); // console.log(funNumbersPerAssignment);\n\n    const funSum = funNumbersPerAssignment.map(funNumbers => funNumbers.reduce((a, b) => a + b));\n    const funAverage = funSum.map(number => number / funNumbersPerAssignment[0].length || 0); // console.log(funSum);\n    // console.log(funAverage);\n\n    const funFactorData = funAverage.map((y, index) => {\n      return {\n        x: index,\n        y\n      };\n    }); // console.log(funFactorData);\n    // functies om difficulty naar het juiste formaat te krijgen.\n    // later nog refactoren zodat ik 1 cluster aan functies voor fun en difficulty heb?\n\n    const difficultyNumbersPerAssignment = uniqueassignments.map(uniqueassignment => {\n      const difficulty = [];\n      items.forEach(item => {\n        if (item.assignment === uniqueassignment) {\n          difficulty.push(parseInt(item.difficulty));\n        }\n      });\n      return difficulty;\n    }); // console.log(difficultyNumbersPerAssignment);\n\n    const difficultySum = difficultyNumbersPerAssignment.map(difficultyNumbers => difficultyNumbers.reduce((a, b) => a + b));\n    const difficultyAverage = difficultySum.map(number => number / difficultyNumbersPerAssignment[0].length || 0); // console.log(difficultySum);\n    // console.log(difficultyAverage);\n\n    const difficultyData = difficultyAverage.map((y, index) => {\n      return {\n        x: index,\n        y\n      };\n    }); // console.log(xyDifficultyAverage);\n    //  const funData = [{x: 0, y: 2 + 4}, {x: 1, y: 4}, {x: 2, y: 4}, {x: 3, y: 4}]\n    //  const difficultyData = [{x: 0, y: 5}, {x: 1, y: 3}, {x: 2, y: 2}, {x: 3, y: 1}]\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Chart\",\n      children: [/*#__PURE__*/_jsxDEV(XYPlot, {\n        height: 400,\n        width: 1350,\n        children: [/*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(VerticalBarSeries, {\n          className: \"funfactor\",\n          color: \"#c99da3\",\n          data: funFactorData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(VerticalBarSeries, {\n          className: \"difficulty\",\n          data: difficultyData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          className: \"funfactor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          className: \"difficulty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChartLabel, {\n          text: \"Assignments\",\n          className: \"alt-x-label\",\n          includeMargin: false,\n          xPercent: 0.025,\n          yPercent: 1.01\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChartLabel, {\n          text: \"Funfactor & difficulty\",\n          className: \"alt-y-label\",\n          includeMargin: false,\n          xPercent: 0.06,\n          yPercent: 0.06,\n          style: {\n            transform: \"rotate(-90)\",\n            textAnchor: \"end\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: this.handleChange,\n            id: \"fun\",\n            type: \"checkbox\",\n            name: \"data\",\n            value: \"funfactor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), \" \", \"Funfactor per assignment\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: this.handleChange,\n            id: \"difficulty\",\n            type: \"checkbox\",\n            name: \"data\",\n            value: \"difficulty\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this), \" \", \"Difficulty per assignment\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["C:/Users/Lydia van Gammeren/Documents/Winc Academy Front-end Opleiding/WincAcademy_Front-end_alle_opdrachten/reactprojectlydia-studentdashboard/src/views/Chart.js"],"names":["React","Component","XYPlot","XAxis","YAxis","HorizontalGridLines","VerticalBarSeries","ChartLabel","Chart","handleChange","event","checkedFunBox","document","getElementById","checkedDifficulty","checkedBoxValue","target","value","funBars","getElementsByClassName","checked","getElementByClassName","style","visibility","console","log","render","items","props","assignments","map","item","assignment","uniqueassignments","Set","funNumbersPerAssignment","uniqueassignment","funFactor","forEach","push","parseInt","funfactor","funSum","funNumbers","reduce","a","b","funAverage","number","length","funFactorData","y","index","x","difficultyNumbersPerAssignment","difficulty","difficultySum","difficultyNumbers","difficultyAverage","difficultyData","transform","textAnchor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  XYPlot,\r\n  XAxis,\r\n  YAxis,\r\n  HorizontalGridLines,\r\n  VerticalBarSeries,\r\n  ChartLabel,\r\n} from \"react-vis\";\r\n\r\nclass Chart extends Component {\r\n  handleChange(event) {\r\n    const checkedFunBox = document.getElementById(\"fun\");\r\n    const checkedDifficulty = document.getElementById(\"difficulty\");\r\n    const checkedBoxValue = event.target.value;\r\n    const funBars = document.getElementsByClassName(\"funfactor\");\r\n    if (checkedFunBox.checked == true) {\r\n      document.getElementByClassName(\"funfactor\").style.visibility = \"visible\";\r\n      console.log(\"fun checkbox was checked\");\r\n    } else {document.getElementByClassName(\"funfactor\").style.visibility = \"visible\"}\r\n  }\r\n  render() {\r\n    // variables die ik voor zowel fun als difficulty nodig heb:\r\n    const { items } = this.props;\r\n    const assignments = items.map((item) => item.assignment);\r\n    const uniqueassignments = [...new Set(assignments)];\r\n    // functies om fun naar het juiste formaat te krijgen\r\n    const funNumbersPerAssignment = uniqueassignments.map(\r\n      (uniqueassignment) => {\r\n        const funFactor = [];\r\n        items.forEach((item) => {\r\n          if (item.assignment === uniqueassignment) {\r\n            funFactor.push(parseInt(item.funfactor));\r\n          }\r\n        });\r\n        return funFactor;\r\n      }\r\n    );\r\n    // console.log(funNumbersPerAssignment);\r\n    const funSum = funNumbersPerAssignment.map((funNumbers) =>\r\n      funNumbers.reduce((a, b) => a + b)\r\n    );\r\n    const funAverage = funSum.map(\r\n      (number) => number / funNumbersPerAssignment[0].length || 0\r\n    );\r\n    // console.log(funSum);\r\n    // console.log(funAverage);\r\n    const funFactorData = funAverage.map((y, index) => {\r\n      return { x: index, y };\r\n    });\r\n    // console.log(funFactorData);\r\n\r\n    // functies om difficulty naar het juiste formaat te krijgen.\r\n    // later nog refactoren zodat ik 1 cluster aan functies voor fun en difficulty heb?\r\n\r\n    const difficultyNumbersPerAssignment = uniqueassignments.map(\r\n      (uniqueassignment) => {\r\n        const difficulty = [];\r\n        items.forEach((item) => {\r\n          if (item.assignment === uniqueassignment) {\r\n            difficulty.push(parseInt(item.difficulty));\r\n          }\r\n        });\r\n        return difficulty;\r\n      }\r\n    );\r\n    // console.log(difficultyNumbersPerAssignment);\r\n    const difficultySum = difficultyNumbersPerAssignment.map(\r\n      (difficultyNumbers) => difficultyNumbers.reduce((a, b) => a + b)\r\n    );\r\n    const difficultyAverage = difficultySum.map(\r\n      (number) => number / difficultyNumbersPerAssignment[0].length || 0\r\n    );\r\n    // console.log(difficultySum);\r\n    // console.log(difficultyAverage);\r\n    const difficultyData = difficultyAverage.map((y, index) => {\r\n      return { x: index, y };\r\n    });\r\n    // console.log(xyDifficultyAverage);\r\n\r\n    //  const funData = [{x: 0, y: 2 + 4}, {x: 1, y: 4}, {x: 2, y: 4}, {x: 3, y: 4}]\r\n    //  const difficultyData = [{x: 0, y: 5}, {x: 1, y: 3}, {x: 2, y: 2}, {x: 3, y: 1}]\r\n\r\n    return (\r\n      <div className=\"Chart\">\r\n        <XYPlot height={400} width={1350}>\r\n          <HorizontalGridLines />\r\n          <VerticalBarSeries\r\n            className=\"funfactor\"\r\n            color=\"#c99da3\"\r\n            data={funFactorData}\r\n          />\r\n          <VerticalBarSeries className=\"difficulty\" data={difficultyData} />\r\n          <XAxis />\r\n          <YAxis className=\"funfactor\" />\r\n          <YAxis className=\"difficulty\" />\r\n          <ChartLabel\r\n            text=\"Assignments\"\r\n            className=\"alt-x-label\"\r\n            includeMargin={false}\r\n            xPercent={0.025}\r\n            yPercent={1.01}\r\n          />\r\n\r\n          <ChartLabel\r\n            text=\"Funfactor & difficulty\"\r\n            className=\"alt-y-label\"\r\n            includeMargin={false}\r\n            xPercent={0.06}\r\n            yPercent={0.06}\r\n            style={{\r\n              transform: \"rotate(-90)\",\r\n              textAnchor: \"end\",\r\n            }}\r\n          />\r\n        </XYPlot>\r\n        {/* <form onSubmit={this.handleSubmit}> */}\r\n        <form>\r\n          <label>\r\n            <input\r\n              onChange={this.handleChange}\r\n              id=\"fun\"\r\n              type=\"checkbox\"\r\n              name=\"data\"\r\n              value=\"funfactor\"\r\n            />{\" \"}\r\n            Funfactor per assignment\r\n          </label>\r\n          <label>\r\n            <input\r\n              onChange={this.handleChange}\r\n              id=\"difficulty\"\r\n              type=\"checkbox\"\r\n              name=\"data\"\r\n              value=\"difficulty\"\r\n            />{\" \"}\r\n            Difficulty per assignment\r\n          </label>\r\n\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;\r\n"]},"metadata":{},"sourceType":"module"}